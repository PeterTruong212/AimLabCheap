#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal;

uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
    // Màu của vật liệu
    vec3 objectColor = vec3(1.0f, 0.5f, 0.31f);
    // Màu ánh sáng
    vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);

    // Tính toán ánh sáng môi trường
    float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * lightColor;

    // Tính toán ánh sáng trực tiếp
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0f);
    vec3 diffuse = diff * lightColor;

    // Tính toán ánh sáng phản xạ
    float specularStrength = 0.5f;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0f), 32);
    vec3 specular = specularStrength * spec * lightColor;

    // Tổng hợp tất cả các thành phần ánh sáng
    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0f);
}
