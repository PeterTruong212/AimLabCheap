#version 330 core
out vec4 FragColor;

in vec3 fragNormal;
in vec3 fragPos;

uniform vec3 lightPos; // Vị trí của nguồn sáng
uniform vec3 viewPos;  // Vị trí của camera

void main()
{
    // Ánh sáng môi trường
    float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * vec3(1.0, 1.0, 1.0);

    // Tính toán ánh sáng điểm (point light)
    vec3 lightColor = vec3(1.0, 1.0, 1.0);
    vec3 lightDir = normalize(lightPos - fragPos);
    float diff = max(dot(fragNormal, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // Tính toán ánh sáng phản chiếu (specular)
    float specularStrength = 0.5f;
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, fragNormal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;

    // Kết hợp tất cả các thành phần ánh sáng
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}